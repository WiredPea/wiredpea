<?php
/**
 * @file
 * This module allows users to replace previously defined words to the links.
 */

/**
 * Implements hook_permission().
 */
function word_link_permission() {
  return array(
    'view word link' => array(
      'title' => t('View Word Link'),
    ),
    'create word link' => array(
      'title' => t('Create Word Link'),
    ),
    'edit word link' => array(
      'title' => t('Edit Word Link'),
    ),
    'delete word link' => array(
      'title' => t('Delete Word Link'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function word_link_menu() {
  $items  = array();

  $items['admin/config/content/word-link'] = array(
    'title' => 'Word Link',
    'description' => 'Administer Words Link',
    'page callback' => 'word_link_list_page',
    'access arguments' => array('view word link'),
    'file' => 'word_link.admin.inc',
  );

  $items['admin/config/content/word-link/list'] = array(
    'title' => 'List',
    'description' => 'Words list',
    'page callback' => 'word_link_list_page',
    'access arguments' => array('view word link'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'word_link.admin.inc',
  );

  $items['admin/config/content/word-link/configuration'] = array(
    'title' => 'Configuration',
    'description' => 'Set the preferences for Word Link module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('word_link_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'word_link.admin.inc',
    'weight' => 1,
  );

  $items['admin/config/content/word-link/add']  = array(
    'title' => 'Add new word',
    'description' => 'Add word',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('word_link_add_form'),
    'access arguments' => array('create word link'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'word_link.admin.inc',
  );

  $items['admin/config/content/word-link/edit/%'] = array(
    'title' => 'Edit word',
    'description' => 'Word edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('word_link_add_form', 5),
    'access arguments' => array('edit word link'),
    'type' => MENU_CALLBACK,
    'file' => 'word_link.admin.inc',
  );

  $items['admin/config/content/word-link/delete/%'] = array(
    'title' => 'Are you sure you want to delete this word?',
    'description' => 'Word delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('word_link_del_form', 5),
    'access arguments' => array('delete word link'),
    'type' => MENU_CALLBACK,
    'file' => 'word_link.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function word_link_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link to 'admin/config/content/word-link/add'
  // on 'admin/config/content/word-link/list' page.
  if ($root_path == 'admin/config/content/word-link') {
    $item = menu_get_item('admin/config/content/word-link/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_node_view().
 */
function word_link_node_view($node, $view_mode, $langcode) {
  // Replace words for every view mode except rss.
  if ($view_mode != 'rss') {
    $types = variable_get('word_link_node_types', array());
    // Check the status of current content type.
    if (!empty($types[$node->type]['fields']) && $types[$node->type]['status']) {
      // Get all words from DB.
      $words = word_link_get_link();
      if (!empty($words)) {
        foreach ($types[$node->type]['fields'] as $field) {
          // Check if field has some text.
          if (!empty($node->content[$field]['#items'])) {
            foreach ($node->content[$field]['#items'] as $delta => $item) {
              // If output format is not HTML, then donâ€™t do anything.
              if ($item['format'] != 'plain_text') {
                $css_status = variable_get('word_link_css', 1);
                if ($css_status) {
                  drupal_add_css(drupal_get_path('module', 'word_link') . '/css/word_link.css');
                }
                // Change field value.
                $node->content[$field][$delta]['#markup'] = word_link_replace_text($words, $node->content[$field][$delta]['#markup'], NULL);
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Find and replace defined word to link.
 */
function word_link_replace_text($words, $subject) {
  // Get disallowed html tags and explode it to array.
  $disallowed_tags = variable_get('word_link_tags_except', NULL);
  $disallowed_tags = preg_split('/\s+|<|>/', $disallowed_tags, -1, PREG_SPLIT_NO_EMPTY);
  if (!empty($disallowed_tags)) {
    foreach ($disallowed_tags as $ancestor) {
      $not[] = 'and not(ancestor::' . $ancestor . ')';
    }
    $not = implode(' ', $not);
  }
  else {
    $not = '';
  }
  // Get word link limit.
  $limit = variable_get('word_link_limit', 0);
  $path = drupal_strtolower(drupal_get_path_alias());
  foreach ($words as $word) {
    $match = !empty($word->except) ? drupal_match_path($path, drupal_get_path_alias(drupal_strtolower($word->except))) : FALSE;
    if (drupal_strtolower($word->url) != $path && !$match) {
      // Build a link.
      $pattern = '\1';
      if (strpos($word->url, 'http://') === 0) {
        $replace[] = l(
          $pattern,
          $word->url,
          array(
            'attributes' => array_filter(array(
              'class' => $word->class,
              'title' => $word->url_title,
              'target' => '_blank',
            )),
            'external' => TRUE,
          )
        );
      }
      else {
        $replace[] = l(
          $pattern,
          $word->url,
          array(
            'attributes' => array_filter(array(
              'class' => $word->class,
              'title' => $word->url_title,
            )),
          )
        );
      }
      if ($word->case_sensitive) {
        $search[] = '$\b(' . preg_quote($word->text) . ')\b$u';
      }
      else {
        $search[] = '$\b(' . preg_quote($word->text) . ')\b$ui';
      }
    }
  }
  if (isset($search) && isset($replace)) {
    $dom = new DOMDocument();
    $subject = str_replace('&amp;', '&#38;#38;', preg_replace('/&(?![a-z])/u', '&amp;', $subject));
    $dom->loadHtml(mb_convert_encoding($subject, 'HTML-ENTITIES', 'UTF-8'));
    $xpath = new DOMXPath($dom);
    $replace_count = 0;
    foreach ($xpath->query('//text()[not(ancestor::a) ' . $not . ']') as $node) {
      if (empty($limit) || $limit > $replace_count) {
        $replaced = preg_replace($search, $replace, $node->wholeText, -1, $count);
        $new_node = $dom->createDocumentFragment();
        $new_node->appendXML($replaced);
        $node->parentNode->replaceChild($new_node, $node);
        $replace_count += $count;
      }
    }
    // Get only the body tag with its contents, then trim the body tag
    // itself to get only the original content.
    $subject = drupal_substr($dom->saveXML($xpath->query('//body')->item(0)), 6, -7);
  }

  return htmlspecialchars_decode($subject);
}

/**
 * Get links from DB.
 */
function word_link_get_link($id = NULL) {
  if ($id) {
    $query = db_select('word_link', 'wl')
      ->fields('wl')
      ->condition('id', $id, '=')
      ->execute()
      ->fetchAll();
  }
  else {
    $query = db_select('word_link', 'wl')
      ->fields('wl')
      ->execute()
      ->fetchAll();
  }
  $links = array();
  if (count($query) > 0) {
    foreach ($query as $value) {
      $links[$value->id] = $value;
    }
  }
  return $links;
}

/**
 * Add/Update link to DB.
 */
function word_link_add_update_link($action, $values, $id = NULL) {
  if ($action == 'insert') {
    drupal_write_record('word_link', $values);
  }
  elseif ($action == 'update') {
    $values['id'] = $id;
    drupal_write_record('word_link', $values, 'id');
  }
}

/**
 * Delete link from DB.
 */
function word_link_del_link($id) {
  db_delete('word_link')->condition('id', $id)->execute();
}

/**
 * Get textarea fields of given content type.
 */
function word_link_get_node_fields($type) {
  $fields = field_info_instances('node', $type);
  $text_fields = array();
  foreach ($fields as $name => $field) {
    if ($field['widget']['type'] == 'text_textarea_with_summary' || $field['widget']['type'] == 'text_textarea') {
      $text_fields[$field['field_name']] = $field['label'];
    }
  }

  return $text_fields;
}
